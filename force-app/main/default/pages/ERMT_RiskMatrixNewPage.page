<apex:page sidebar="false" showHeader="false" standardController="Project__c" extensions="ERMT_ProjectCX" docType="html-5.0" >
<html ng-app="SLDSApp">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <apex:slds />
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.2/angular.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.8/angular-sanitize.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.10/lodash.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.js"></script>
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/dom-to-image/2.6.0/dom-to-image.js"></script> -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js"></script>
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"/>
    <apex:includeScript value="{!$Resource.svg4everybody}"/>
    <style>
    .wrapper-page {
        width: 890px;
        margin: 10px auto;
    }
    .axis-y {
        display: inline-block;
        vertical-align: top;
        margin-right: 20px;
        position: relative;
    }
    .axis-y .label-axis-y {
        position: absolute;
        top: -25px;
        right:-123px;
        width: 200px;
        text-align: center;
    }
    .axis-y li{
        display: block;
        padding: 0;
        margin: 0;
        height: 100px;
        line-height: 100px;
        text-align: right;
    }
    .axis-y li .num {
        float: right;
        margin-left: 10px;
    }
    .axis-x {
        width: 70%;
        margin-left: 20%;
        position: relative;
    }
    .axis-x .label-axis-x {
        position: absolute;
        top: 0;
        right: 0;
    }
    .axis-x ul{
        display: flex;
        justify-content: space-between;
    }
    .axis-x ul li{
        width: 150px;
        text-align: center;
        margin:0;
        padding:0;
    }
    .axis-x li .num {
        display: block;
        margin: 15px 0 5px;
    }
    .grid{
        display: inline-table;
        width: 70%;
        height: 450px;
        background-color: #F3F2F2;
        border-left: solid 1px #F3F2F2;
        border-top: solid 1px #F3F2F2;
    }
    .grid li {
/*width: 150px;
height: 100px;*/
padding: 0;
margin: 0;
/*border-top: solid 1px #ccc;
border-right: solid 1px #ccc;
display: inline-grid;
display: -webkit-inline-box;
display: -ms-inline-grid;*/
display: block;
float: left;
text-align: center;
}
.grid li .wrapper-column{
    padding: 5px;
    overflow: auto;
    width: calc(100% - 1px);
    height: calc(100% - 1px);
}
.grid li .wrapper-column .record-link {
    border: solid 1px #ccc;
    padding: 0 5px;
    display: block;
    color: #fff; 
    margin-bottom: 5px;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
}
#id_selectEvaluation{
    width: 150px;
    margin-left: -83px; 
    border-radius: .25rem; 
    padding-left: .5rem;
    padding-right: 0.1rem; 
    border: 1px solid rgb(221, 219, 218); 
    height: calc(1.875rem + (1px * 2));
}
#id_selectEvaluation2{
    width: 150px;
    border-radius: .25rem; 
    padding-left: .5rem;
    padding-right: 0.1rem; 
    border: 1px solid rgb(221, 219, 218); 
    height: calc(1.875rem + (1px * 2));
}
#id_evaluation{
    width: 250px;
    margin-left: -280px;
    margin-bottom: -33px;
    text-align: right;
}
#btnSave{
    // margin-bottom: 38px; 
    // margin-left: -45px; 
    width: 112px;
    text-align: left
}
#button-down{
    margin-left: 80%;
    margin-bottom: 5px; 
    margin-top: -2% ;
}
.wrapper-page{
    text-align: center; 
    background-color: white;
}
@media screen and (max-width: 1200px) {
    .axis-x {
        margin-left: 22%;
    }
    #id_evaluation{
        margin-left: -320px;
    }
}
@media screen and (max-width: 1024px) {
    .axis-x {
        margin-left: 23%;
    }
    #id_evaluation{
        margin-left: -320px;
    }
}
@media screen and (max-width: 768px) {
    .axis-x {
        margin-left: 26%;
    }
    #id_evaluation{
        margin-left: -320px;
    }
}
.dis-flex{
    display: flex;
}
.dis-flex-wrap{
    display: flex;
    flex-wrap: wrap;
}
.filter-option{
    min-width: 360px;
}
.filter-option-checkbox{
    min-width: 180px;
	padding-left: 15px;
}
.valuation-option{
	min-width: 180px;
	padding-left: 9px;
}
.valuation-label {
	min-width: 180px;
	padding-left: 15px;
}
.filter-option-picklist{
    min-width: 180px;
}
.align-right {
    text-align: right;   
}
</style>
</head>
<body ng-controller="MainController">
    <div class="wrapper-page">
        <div class="slds-grid">
            <div class="slds-col">
                <div class="slds-combobox_container" on-deselect="axisSetDropDown = false;">
                    <div class="slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click" aria-expanded="true" aria-haspopup="listbox" role="combobox" ng-class="{'slds-is-open' : axisSetDropDown}">
                        <div class="slds-combobox__form-element slds-input-has-icon slds-input-has-icon_right" role="none" ng-click="axisSetDropDown = !axisSetDropDown;">
                            <input type="text" class="slds-input slds-combobox__input slds-combobox__input-value" title="{{selectedAxisSet.label}}"
                                autoComplete="off" role="textbox" readonly="readonly" value="{{selectedAxisSet.label}}"
                            />
                            <span class="slds-icon_container slds-icon-utility-down slds-input__icon slds-input__icon_right">
                                <svg class="slds-icon slds-icon slds-icon_x-small slds-icon-text-default" aria-hidden="true">
                                    <use href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                </svg>
                            </span>
                        </div>
                        <div role="listbox" class="slds-dropdown slds-dropdown_fluid">
                            <ul class="slds-listbox slds-listbox_vertical slds-scrollable_y" role="presentation" style="max-height: 250px;">
                                <li role="presentation" class="slds-listbox__item" ng-repeat="item in axisSetList" ng-click="selectAxisSet(item)">
                                    <div class="slds-media slds-listbox__option slds-listbox__option_plain slds-media_small slds-media_center" role="option"
                                        ng-class="{'slds-is-selected' : selectedAxisSet.value == item.value }"
                                    >
                                        <span class="slds-media__figure">
                                            <svg class="slds-icon slds-icon_x-small slds-listbox__icon-selected" aria-hidden="true">
                                                <use href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#check')}"></use>
                                            </svg>
                                        </span>
                                        <span class="slds-media__body" style="text-align: left;">
                                            <span class="slds-truncate" title="{{item.label}}">
                                                {{item.label}}
                                            </span>
                                        </span>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <div class="slds-col align-right">
                <button class="slds-button slds-button_neutral slds-m-right_small" id="btnSave"
                    ng-if="{!$Permission.ermt__Can_download_chart_image}"
                >ダウンロード</button>
            </div>
        </div>
        <div id="section" class="slds-section slds-m-right_small">
            <h3 class="slds-section__title">
                <button id="sectionButton" aria-controls="expando-unique-id" aria-expanded="false" class="slds-button slds-section__title-action">
                    <svg class="slds-section__title-action-icon slds-button__icon slds-button__icon_left" aria-hidden="true">
                        <use href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#switch')}"></use>
                    </svg>
                    <span class="slds-truncate" title="Section Title">フィルター</span>
                </button>
            </h3>
            <div aria-hidden="true" class="slds-section__content" id="expando-unique-id">
                <!-- <div class="slds-m-left_small" ng-if="{!$Permission.ermt__Can_download_chart_image}"> -->
                <div class="slds-m-left_small">
                    <div class="dis-flex">
                        <div class="dis-flex valuation-label">
                            <p class="slds-m-top_x-small">{{evaluationLabel}}</p>
                        </div>
                        <div class="dis-flex valuation-option">
                            <div class="slds-form-element">
                              <div class="slds-form-element__control">
                                <div class="slds-combobox_container slds-size_small" on-deselect="evaluationShowDropDown = false;">
                                  <div class="slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click" ng-class="{'slds-is-open' : evaluationShowDropDown}" aria-expanded="true" aria-haspopup="listbox" role="combobox">
                                    <div class="slds-combobox__form-element slds-input-has-icon slds-input-has-icon_right" role="none" ng-click="evaluationShowDropDown = !evaluationShowDropDown;">
                                      <input type="text" class="slds-input slds-combobox__input slds-combobox__input-value" id="combobox-unique-id-26" aria-controls="listbox-unique-id" autoComplete="off" role="textbox" placeholder="選択肢を選んでください。" readonly="" value="{{selectedValuation.label}}" />
                                      <span class="slds-icon_container slds-icon-utility-down slds-input__icon slds-input__icon_right" title="Description of icon when needed">
                                        <svg class="slds-icon slds-icon slds-icon_x-small slds-icon-text-default" aria-hidden="true">
                                          <use href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                        </svg>
                                      </span>
                                    </div>
                                    <div id="listbox-unique-id" role="listbox" class="slds-dropdown slds-dropdown_fluid">
                                      <ul class="slds-listbox slds-listbox_vertical" role="presentation">
                                        <li role="presentation" class="slds-listbox__item" ng-repeat="item in evaluationList" ng-click="ChangeEvaluation(item)">
                                          <div id="listbox-option-unique-id-01" class="slds-media slds-listbox__option slds-listbox__option_plain slds-media_small slds-media_center" ng-class="{'slds-is-selected' : selectedValuation == item }" role="option">
                                            <span class="slds-media__figure">
                                              <svg class="slds-icon slds-icon_x-small slds-listbox__icon-selected" aria-hidden="true">
                                                <use href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#check')}"></use>
                                              </svg>
                                            </span>
                                            <span class="slds-media__body" style="text-align: left;">
                                                <span class="slds-truncate" title="{{item.label}}" ng-bind-html="item.label"></span>
                                            </span>
                                          </div>
                                        </li>
                                      </ul>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                        </div>
                    </div>
                    <div class="dis-flex-wrap">
                        <div ng-repeat="classy in classiList">
                            <div class="dis-flex filter-option">
                                <div class="dis-flex filter-option-checkbox">
                                    <div class="slds-checkbox slds-m-top_small">
                                        <input type="checkbox" name="options" id="checkbox-classi-{{$index}}" value="checkbox-classi-{{$index}}" ng-model="classy.isGetAll"/>
                                        <label class="slds-checkbox__label" for="checkbox-classi-{{$index}}">
                                            <span class="slds-checkbox_faux"></span>
                                            <span class="slds-form-element__label">{{classy.Name}}</span>
                                        </label>
                                    </div>
                                </div>
                                <div class="dis-flex filter-option-picklist">
                                    <!-- <select id="id_selectEvaluation2" class="slds-m-around_x-small" ng-model="classy.selectedValue" ng-options="item.Id as item.ermt__Label__c for item in classy.ermt__MClassifications_del__r"></select> -->
                                    <div class="slds-form-element__control slds-m-around_x-small">
                                        <div class="slds-combobox_container slds-size_small" on-deselect="classy.showDropDown = false;">
                                            <div class="slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click" aria-expanded="true" aria-haspopup="listbox" role="combobox" ng-class="{'slds-is-open' : classy.showDropDown}">
                                                <div class="slds-combobox__form-element slds-input-has-icon slds-input-has-icon_right" role="none" ng-click="classy.showDropDown = !classy.showDropDown;">
                                                    <input type="text" class="slds-input slds-combobox__input slds-combobox__input-value" id="combobox-unique-id-26" aria-controls="listbox-unique-id" autoComplete="off" role="textbox" placeholder="選択肢を選んでください。" readonly="readonly" value="{{classy.selectedValueString.join(', ')}}" 
                                                    />
                                                    <span class="slds-icon_container slds-icon-utility-down slds-input__icon slds-input__icon_right">
                                                        <svg class="slds-icon slds-icon slds-icon_x-small slds-icon-text-default" aria-hidden="true">
                                                            <use href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                                        </svg>
                                                    </span>
                                                </div>
                                                <div id="listbox-unique-id" role="listbox" class="slds-dropdown slds-dropdown_fluid">
                                                    <ul class="slds-listbox slds-listbox_vertical slds-scrollable_y" role="presentation" style="max-height: 250px;">
                                                        <li role="presentation" class="slds-listbox__item" ng-repeat="item in classy.ermt__MClassifications_del__r" ng-click="selectValue(classy, item.Id)">
                                                            <div id="listbox-option-unique-id-01" class="slds-media slds-listbox__option slds-listbox__option_plain slds-media_small slds-media_center" role="option"
                                                            ng-class="{'slds-is-selected' : classy.selectedValue.indexOf(item.Id) !== -1 }">
                                                                <span class="slds-media__figure">
                                                                    <svg class="slds-icon slds-icon_x-small slds-listbox__icon-selected" aria-hidden="true">
                                                                        <use href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#check')}"></use>
                                                                    </svg>
                                                                </span>
                                                                <span class="slds-media__body" style="text-align: left;">
                                                                    <span class="slds-truncate" title="{{item.ermt__Label__c}}" ng-bind-html="item.ermt__Label__c">
                                                                    </span>
                                                                </span>
                                                            </div>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="slds-m-top_xx-small">
                        <button class="slds-button slds-button_neutral slds-m-right_x-large" ng-click="refreshChart()">フィルター</button>
                    </div> 
                </div>
            </div>
        </div>

        <div class="slds-m-top_x-large">
            <div class="axis-y">
                <p class="label-axis-y">{{yAxis[0] ? yAxis[0].ermt__ParentMClassification_del__r.ermt__Label__c : ''}}</p>
                <ul>
                    <li ng-repeat="y in yAxis | orderBy:'ermt__ViewNo__c':true">{{y.ermt__Label__c}}<span class="num">{{y.ermt__ViewNo__c}}</span></li>
                </ul>
            </div>
            <!-- end left asix y-->
            <ul class="grid">
            <!--
            repeat li 25 times
            <li>
            <div class="wrapper-column">
            <a class="record-link" href="#">this is grid</a>
            </div>
            </li>
            -->
            </ul>
            <div class="axis-x">
                <p class="label-axis-x">{{xAxis[0] ? xAxis[0].ermt__ParentMClassification_del__r.ermt__Label__c : ''}}</p>
                <ul>
                    <li ng-repeat="x in xAxis | orderBy:'ermt__ViewNo__c'"><span class="num">{{x.ermt__ViewNo__c}}</span>{{x.ermt__Label__c}}</li>
                </ul>
            </div>
        </div>
    <!-- end asix x  -->
    </div>
<!--end wrapper-page-->
</body>
<script type="text/javascript">
var projectName = '';

$(function() { 
    $("#sectionButton").click(function() {
        var sec = document.getElementById("section");
        if (sec.classList.contains("slds-is-open")){
            sec.classList.remove("slds-is-open");
        } else {
            sec.classList.add("slds-is-open");
        }
    });
	svg4everybody();
    $("#btnSave").click(function() { 

        document.getElementById("btnSave").style.visibility = 'hidden';
        // var $clone = $('<div>').append($('body').html())
        // $clone.find('script').remove();
        // console.log('body' , document.body);
        // var cloneBody = $('body').html($clone.html());


        html2canvas(document.body, {
            // width: 1200,
            // height: 800,
            onrendered: function(canvas) {
                theCanvas = canvas;

                if (canvas.msToBlob) { //for IE
                    var blob = canvas.msToBlob();
                    window.navigator.msSaveBlob(blob, '{!ermt__Project__c.Name}' + ".png");
                } 
                else{
                    canvas.toBlob(function(blob) {
                        saveAs(blob, '{!ermt__Project__c.Name}' + ".png"); 
                    });
                }

                document.getElementById("btnSave").style.visibility = 'visible';
            }
        });
    });
}); 

$(document).ready(function(){
    // for(var i=0; i<25; i++){
    //     $('.grid').append('<li><div class="wrapper-column"><a class="record-link" href="#" title="">this is grid</a></div></li>');
    // }

    // $( ".record-link" ).tooltip({
    //   content: "<p>Awesome title!<br/>this is new line</p>"
    // });
});
defaultColor ="#FFFFFF"

var app = angular.module("SLDSApp",['ngSanitize']);
app.directive('onDeselect', [ '$document', function($document) {
  
  return {
    scope: { onDeselect: '&' },
    link: function(scope, element, attrs) {

      var clickHandler = function(e) {
        var target = e.target;
        while (target) {
          if (element[0] === target) return;
          target = target.parentElement;
        }
        
        scope.$apply(function() {
          scope.onDeselect({$event:e});
        });
      };

      $document.on('click', clickHandler);

      // clean handler on destroy
      scope.$on('$destroy', function() {
        $document.off('click', clickHandler);
      });
    }
  };
}]);
app.controller('MainController', function($scope) {
    $scope.xAxis = [];
    $scope.yAxis = [];
    $scope.riskData = [];
    $scope.riskList = [];
    $scope.evaluationList = [];
    $scope.selectedValuation = {label:"なし" , value: "なし"};
    $scope.evaluationShowDropDown = false;
    $scope.axisSetList = [];
    $scope.selectedAxisSet = {label: '' , value: ''};
    $scope.axisSetDropDown = false;
    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ERMT_ProjectCX.getCellColor}','{!ermt__Project__c.Id}', function(result, event) {
        $scope.CellColorList = result; 
        $scope.$apply();
    });

    Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.ERMT_ProjectCX.getClassificationList}',
    '{!ermt__Project__c.Id}', 
    function(result, event) {
        angular.forEach(result, function(a) {
            a.selectedValue = [];
            a.selectedValueString = [];
            a.isGetAll = false;
        });
        console.log(result);
        $scope.classiList = result;
        $scope.status =  event.status;
        $scope.$apply();
    });

    Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.ERMT_ProjectCX.getEvaluationList}',
    '{!ermt__Project__c.Id}',
    function(result, event) {
        angular.forEach(result, function(a) {
            $scope.evaluationLabel = a.ermt__ParentMClassification_del__r.ermt__Label__c;
            $scope.evaluationList.push({label:a.ermt__Label__c , value: a.ermt__Label__c});
        });
        $scope.evaluationList.unshift({label:"なし" , value: "なし"});
        $scope.selectedValuation = $scope.evaluationList[0];
        // console.log($scope.evaluationList);
        $scope.$apply();
    });

    $scope.selectValue = function(classy, itemId) {
        if (itemId) {
            const index = classy.selectedValue.indexOf(itemId);

            if (index === -1) {
                classy.selectedValue.push(itemId);
            } else {
                classy.selectedValue = classy.selectedValue.filter(function (selectedValue) { return selectedValue !== itemId; });
            }

            classy.selectedValueString = classy.ermt__MClassifications_del__r
                .filter(function (item) { return classy.selectedValue.indexOf(item.Id) !== -1; })
                .map(function(item) {return $('<textarea />').html(item.ermt__Label__c).text()});
        }
    }

    $scope.ChangeEvaluation = function(e){
        $scope.selectedValuation = e;
        // var element = document.getElementsByTagName("a"), index;
        // for (index = element.length - 1; index >= 0; index--) {
        //     element[index].parentNode.removeChild(element[index]);
        // }

        // var elements = document.getElementsByTagName('a');
        // while (elements[0]) elements[0].parentNode.removeChild(elements[0]);

        //$scope.refreshChart();
    }

    // 軸の設定の選択時
    $scope.selectAxisSet = function(e) {
        $scope.selectedAxisSet = e;

        // 軸の最新表示
        $scope.refreshAxis();
    };

    

    // 軸の最新表示
    $scope.refreshAxis = function() {
        Visualforce.remoting.Manager.invokeAction(
        '{!$RemoteAction.ERMT_ProjectCX.getAxisLabel}',
        '{!ermt__Project__c.Id}',
        function(result, event) {
            if(event.status){
                // 軸の設定の選択リストの作成
                if ($scope.axisSetList.length === 0) {
                    var likeLabel = (result.xAxis.length === 0 ? '' : result.xAxis[0].ermt__ParentMClassification_del__r.ermt__Label__c);
                    var impactLabel = (result.yAxis.length === 0 ? '' : result.yAxis[0].ermt__ParentMClassification_del__r.ermt__Label__c);
                    var item = {label: 'X軸：' + likeLabel + '、Y軸：' + impactLabel , value: '1'};
                    $scope.axisSetList.push(item);
                    $scope.selectedAxisSet = item;
                    item = {label: 'X軸：' + impactLabel + '、Y軸：' + likeLabel , value: '2'};
                    $scope.axisSetList.push(item);
                }

                // console.log(result);
                $scope.xAxis = result.xAxis;
                $scope.yAxis = result.yAxis;

                // 軸の設定によって、X軸とY軸を反転
                if ($scope.selectedAxisSet.value === '2') {
                    $scope.xAxis = result.yAxis;
                    $scope.yAxis = result.xAxis;
                }

                // for(var i = $scope.yAxis.length; i >= 1; i--){
                //   for(var j = 1; j <= $scope.xAxis.length; j++){
                //     $('.grid').append('<li><div id="cell-'+j+'-'+i+'" class="wrapper-column"></div></li>');
                //   }
                // }
                $scope.viewNo = [];
                $('.grid').empty();
                for(var i = $scope.yAxis.length; i >= 1; i--){
                    for(var j = 1; j <= $scope.xAxis.length; j++){
                        var colorCell = defaultColor;
                        var colorLink = defaultColor;
                        for(var k = 0 ;k < $scope.CellColorList.length ; k++ ){
                            var cellColor = $scope.CellColorList[k];
                            var yCordinate = cellColor.ermt__YCordinate__c;
                            var xCordinate = cellColor.ermt__XCordinate__c;

                            // 軸の設定によって、X軸とY軸を反転
                            if ($scope.selectedAxisSet.value === '2') {
                                yCordinate = cellColor.ermt__XCordinate__c;
                                xCordinate = cellColor.ermt__YCordinate__c;
                            }

                            if($scope.yAxis[i-1].Id == yCordinate && $scope.xAxis[j-1].Id == xCordinate) {
                                colorCell = cellColor.ermt__ColorCode__c;
                                colorLink = cellColor.ermt__ColorLinkCode__c;
                                break;
                            }
                        }
                        $scope.viewNo.push({x: j , y :i , color: colorLink ? colorLink : defaultColor});
                        $('.grid').append('<li><div id="cell-'+j+'-'+i+'" class="wrapper-column" style= "background-color: '+ colorCell + '"></div></li>');
                    }
                }
                $scope.$apply();
                const grid_wid = Math.floor($( window ).width() * 0.7) + 1;

                $('.grid li').css({
                    'width': grid_wid/$scope.xAxis.length,
                    'height': grid_wid/$scope.yAxis.length * 0.8 - 1
                });
                // $('.grid li .wrapper-column').css({
                //   'width': 'calc(100%/'+$scope.xAxis.length+' - 1px)',
                //   'height': 'calc(100%/'+$scope.yAxis.length+')'
                // });
                var wid_col = $('.grid li').outerWidth();
                var hei_col = $('.grid li').outerHeight();
                var wid_yAxis = $('.axis-y').outerWidth();
                $('.grid').css({
                    'width': grid_wid + 1 + 'px',
                    'height': hei_col*$scope.yAxis.length + 2 + 'px'
                });

                $('.wrapper-page').css({
                    'width': '100%'
                });
                $('.axis-y li').css({
                    'height': hei_col + 'px',
                    'line-height': hei_col + 'px'
                })
                $('.axis-x').css({
                    'width': grid_wid
                });
                $('.axis-x li').css({
                    'width': grid_wid/($scope.xAxis.length + 1)
                })
            }
            $scope.refreshChart();
        });
    };

    $scope.refreshChart = function() {
        if ($scope.status) {
            //Clear all a tag in grid
            var elements = document.getElementsByTagName('a');
            while (elements[0]) elements[0].parentNode.removeChild(elements[0]);

            //Filtered Risk list
            var parentClassiIds = [];
            var childClassiIds = [];
            angular.forEach($scope.classiList, function(a) {
                if(a.isGetAll){
                    parentClassiIds.push(a.Id);
                }
                else if(a.selectedValue){
                    angular.forEach(a.selectedValue, function(b) {
                        childClassiIds.push(b);
                    });
                }
            });

            Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.ERMT_ProjectCX.getRiskOfProjectByClassification}',
            '{!ermt__Project__c.Id}',
            parentClassiIds,
            childClassiIds,
            function(result, event) {
                if (event.status) {
                    $scope.riskList = result;

                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.ERMT_ProjectCX.getAverageRisk}',
                        '{!ermt__Project__c.Id}',
                        $scope.selectedValuation.value,
                        function(result2, event2) {
                            if (event2.status) {
                                $scope.riskData = _.intersectionWith(_.cloneDeep($scope.riskList), result2, function(x, y) {
                                    return x.Id === y.ermt__Risk__c && _.assign(x, y);
                                });
                                // console.log($scope.riskData);
                                angular.forEach($scope.riskData, function(item) {
                                var x = item.avgLike ? _.ceil(item.avgLike) : 1;
                                var y = item.avgImpact ? _.ceil(item.avgImpact) : 1;

                                // 軸の設定によって、X軸とY軸を反転
                                if ($scope.selectedAxisSet.value === '2') {
                                    var bk = x;
                                    x = y;
                                    y = bk;
                                }

                                var color;
                                for (var i = 0; i < $scope.viewNo.length; i++) {
                                    if (x == $scope.viewNo[i].x && y == $scope.viewNo[i].y) {
                                        color = $scope.viewNo[i].color;
                                        break;
                                    }
                                }
                                $('#cell-' + x + '-' + y).append('<a id="link-' + item.Id + '" class="record-link" href="/' + item.Id + '" title="" target="_blank" style="background-color: ' + color + ' ; color : black">' + item.Name + '</a>');

                                var avgLike = item.avgLike ? _.ceil(item.avgLike, 2) : 0;
                                var avgImpact = item.avgImpact ? _.ceil(item.avgImpact, 2) : 0;

                                // 軸の設定によって、X軸とY軸を反転
                                if ($scope.selectedAxisSet.value === '2') {
                                    var bk = avgLike;
                                    avgLike = avgImpact;
                                    avgImpact = bk;
                                }

                                $('#link-' + item.Id).tooltip({
                                    content: '<p>' + item.Name + '<br/>' + ($scope.xAxis[0] ? $scope.xAxis[0].ermt__ParentMClassification_del__r.ermt__Label__c : '') + ': ' + avgLike + '<br/>' + ($scope.yAxis[0] ? $scope.yAxis[0].ermt__ParentMClassification_del__r.ermt__Label__c : '') + ': ' + avgImpact + '</p>'
                                });
                            });
                        }
                    });
                }
            });
        }
    };

    // 軸の最新表示
    $scope.refreshAxis();
});
</script>
</html>
</apex:page>